[{"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\index.js":"1","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\reportWebVitals.js":"2","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\containers\\App.js":"3","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\containers\\Welcome.js":"4","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\utils\\helpers.js":"5","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\components\\Copyright.js":"6","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\components\\LinearProgressWithLabel.js":"7","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\components\\Character.js":"8"},{"size":752,"mtime":1610786309471,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":9948,"mtime":1610815062399,"results":"12","hashOfConfig":"10"},{"size":3801,"mtime":1610870352025,"results":"13","hashOfConfig":"10"},{"size":591,"mtime":1607956450112,"results":"14","hashOfConfig":"10"},{"size":429,"mtime":1610370743270,"results":"15","hashOfConfig":"10"},{"size":575,"mtime":1610371142296,"results":"16","hashOfConfig":"10"},{"size":1902,"mtime":1610487353826,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"15vjzig",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\index.js",[],["36","37"],"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\reportWebVitals.js",[],"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\containers\\App.js",["38"],"import React, {useState, useEffect, useRef, useCallback} from 'react';\nimport disasterPet from '../assets/character/disaster-pet.svg';\nimport exercisePet from '../assets/character/exercise-pet.svg';\nimport foodPet from '../assets/character/food-pet.svg';\nimport mischiefPet from '../assets/character/mischief-pet.svg';\nimport sickPet from '../assets/character/sick-pet.svg';\nimport tricksPet from '../assets/character/tricks-pet.svg';\nimport welcomePet from '../assets/character/welcome-pet.svg';\nimport {useParams} from 'react-router-dom';\nimport {accurateInterval} from '../utils/helpers.js';\nimport Copyright from '../components/Copyright';\nimport Character from '../components/Character';\nimport LinearProgressWithLabel from '../components/LinearProgressWithLabel';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { StaticBanner } from 'material-ui-banner';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n root: {\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: '2rem auto',\n    maxWidth: 680,\n  },\n  avatarLarge: {\n  \twidth: 72,\n    height: 72,\n  }\n  }));\n\n//Helper functions\n \n function status(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return Promise.resolve(response)\n  } else if (response.status === 429){\n    return Promise.resolve(response)\n  }else {\n    return Promise.reject(new Error(response.statusText))\n  }\n }\n\n function json(response) {\n  return response.json()\n }\n\n const stayInRange = (stat) => {\n  \tif (stat >= 0 && stat <= 100)\n\t    return stat;\n\t else if (stat > 100)\n\t    return 100;\n\telse\n\t    return 0;\n  }\n\nconst getCharacter = (eventType) => {\n  \n  let eventGraphic;\n\n  switch(eventType) {\n\tcase 'Natural Disaster':\n\t\teventGraphic = disasterPet;\n\t\tbreak;\n\tcase 'Food':\n\t\teventGraphic = foodPet;\n\t\tbreak;\n\tcase 'Mischief':\n\t\teventGraphic = mischiefPet;\n\t\tbreak;\n\tcase 'Disease':\n\t\teventGraphic = sickPet;\n\t\tbreak;\n\tcase 'Tricks':\n\t\teventGraphic = tricksPet;\n\t\tbreak;\n\tcase 'Exercise':\n\t\teventGraphic = exercisePet;\n\t\tbreak;\n\tdefault:\n\t\teventGraphic = welcomePet;\n\t}\n\n\treturn eventGraphic;\n}\n\n\nexport default function App() {\n\nconst [name, setName] = useState('Pippin');\nconst [dayDuration, setDayDuration] = useState(1000); //in miliseconds\nconst [age, setAge] = useState(0);\nconst [health, setHealth] = useState(100);\nconst [hunger, setHunger] = useState(0);\nconst [happiness, setHappiness] = useState(100);\nconst [gameEnd, setGameEnd] = useState(false);\nconst [dialogOpen, setDialogOpen] = useState(false);\nconst timeoutRef = useRef();\nconst eventTimeoutRef = useRef();\nconst classes = useStyles();\nconst {petName, dayDurationInSeconds} = useParams();\n\n\n\n const beginLife = () => {\n    let timeOutInfo = accurateInterval(() => {\n          petDay();\n        }, dayDuration) \n    timeoutRef.current = timeOutInfo;\n    //console.log(timeoutRef.current)\n }\n\n  const handleNextEvent = (nextEvent) => {\n  \t/*timeoutRef.current is null when starting a new game. \n  \tThis condition also keeps the app from fetching when the game has ended\n  \t*/\n  \tif (timeoutRef.current !== null) {\n\t  \tlet nextEventInfo = accurateInterval(() => {\n\t          getNextEvent();\n\t        }, nextEvent)\n\t    eventTimeoutRef.current = nextEventInfo;\n    \t//console.log(eventTimeoutRef.current);\n    }\n  }\n\n  const getNextEvent = () => {\n  \t\n\t\tfetch('https://www.virtual-pet.uk/v1/event')\n\t\t\t.then(status)\n\t\t\t.then(json)\n\t\t\t.then(function(data) {\n\t\t\t    if(data.type === 'Error'){\n\t\t\t    \t console.log('Request failed', data);\n\t\t\t    \t if (eventTimeoutRef.current) {\n\t\t\t\t\t\t    eventTimeoutRef.current.cancel();\n\t\t\t\t\t\t    eventTimeoutRef.current = null;\n\t\t\t\t\t\t }\n\t\t\t    \t handleNextEvent(data.nextEvent * dayDuration);\n\t\t\t    } else {\n\t\t\t    \tconsole.log('Request succeeded with JSON response', data);\n\t\t\t\t    setHealth((prev) => stayInRange(prev + data.impact.health));\n\t\t\t\t\tsetHunger((prev) => stayInRange(prev + data.impact.hunger));\n\t\t\t\t\tsetHappiness((prev) => stayInRange(prev + data.impact.happiness));\n\t\t\t\t\thandleOpenBanner(data.type.toUpperCase() + \"! \" + data.title + \": \" + data.description + \" Impact, health: \" + data.impact.health + \" hunger: \" + data.impact.hunger + \" happiness: \" + data.impact.happiness, getCharacter(data.type));\n\t\t\t\t\tif (eventTimeoutRef.current) {\n\t\t\t\t\t\t    eventTimeoutRef.current.cancel();\n\t\t\t\t\t\t    eventTimeoutRef.current = null;\n\t\t\t\t\t\t }\n\t\t\t\t\thandleNextEvent(data.nextEvent * dayDuration); \n\t\t\t\t}\t\t\t    \t\n\n\t\t\t }).catch(function(error) {\n\t\t\t    console.log('Request failed', error);\n\t\t\t });\n\t\t  \t\n  }\n\n const petDay = () => {\n\tsetAge((prev) => prev + 1);\n\tsetHealth((prev) => stayInRange(prev - 1));\n\tsetHunger((prev) => stayInRange(prev + 1));\n\tsetHappiness((prev) => stayInRange(prev - (Math.floor(Math.random() * 5) + 1)));\n  }\n\n  const cleanPet = () => {\n  \tif (!gameEnd) {\n  \t\tsetHealth((prev) => stayInRange(prev + 1));\n  \t}\n  }\n\n  const feedPet = () => {\n  \tif (!gameEnd) {\n  \t\tsetHunger((prev) => stayInRange(prev - 1));\n  \t}\n  }\n\n  const playPet = () => {\n  \tif (!gameEnd) {\n  \t\tsetHappiness((prev) => stayInRange(prev + (Math.floor(Math.random() * 5) + 1))); // random reduction between 1 -> 5)\n  \t}\n  }\n\n\n  const resetGame = () => {  \t  \t\n  \tsetAge(0);\n\tsetHealth(100);\n\tsetHunger(0);\n\tsetHappiness(100);\n\tsetGameEnd(false);\n  }\n\n  //helper functions\n  const handleDialogClose = () => {\n    setDialogOpen(false);\n  };\n\n  const handleOpenBanner = useCallback((text, eventTypeGraphic) => StaticBanner.show({\n  \t\ticon: <div />,\n  \t\ticonProps : {\n  \t\t\tsrc: eventTypeGraphic,\n  \t\t\tclassName:  classes.avatarLarge\n  \t\t},\n\t    open:  true,\n\t    label: text,\n   }), [classes.avatarLarge]);\n\n  const cleanup = () => {\n     //Cancel timers\n\t\tif (timeoutRef.current) {\n\t      timeoutRef.current.cancel();\n\t      \n\t    }\n\t    if (eventTimeoutRef.current) {\n\t\t  eventTimeoutRef.current.cancel();\n\t\t}\n\n\t\ttimeoutRef.current = null;\n\t\teventTimeoutRef.current = null;\n   }\n  \n  //Effects\n\n  useEffect(() => {\n   if (health <= 0 ) {   \t \n   \t setDialogOpen(true);\n\t setGameEnd(true);\n   }\n  }, [health]);\n\n  useEffect(() => {\n  \tif (!gameEnd) { \t\t\n  \t\t\n  \t\tif (petName !== undefined) {\n\t\t\t setName(decodeURIComponent(petName))\n\t\t}\n\n\t\tif (dayDurationInSeconds !== undefined && !Number.isNaN(parseInt(dayDurationInSeconds)) ) {\n\t\t   let inputedDuration = parseInt(dayDurationInSeconds)\n\t\t   if (inputedDuration<=0){\n\t\t  \t setDayDuration(1000);\n\t\t   } else if (inputedDuration > 60) {\n\t\t  \t setDayDuration(60*1000);\n\t\t   } else {\n\t\t  \t setDayDuration(inputedDuration*1000);\n\t\t   }  \n\t\t} else {\n\t\t\tsetDayDuration(1000);\n\t\t}\n\n\t  \tbeginLife(); \n\n\t  \thandleNextEvent(5 * dayDuration);\n\n  \t} else {\n  \t\tcleanup();\n  \t}\n\n  \treturn cleanup;\n\n  }, [gameEnd, petName, dayDurationInSeconds, dayDuration]);\n\n  return (\n  \t<React.Fragment>\n  \t   <CssBaseline />\n  \t   <StaticBanner />\n\t\t<Grid container component=\"main\" className={classes.root}>\n\t      <Paper className={classes.paper}>\n\t        <Grid container spacing={2}>\n\t          <Grid item xs={8} sm={8} md={6} container>\n\t            <Grid item xs container direction=\"column\" spacing={2}>\n\t              <Grid item xs>\n\t                <Typography variant=\"h2\">\n\t                  {name}\n\t                </Typography>\n\t                <Typography variant=\"h6\">\n\t                  Age: {age}\n\t                </Typography>\n\t                 <Typography variant=\"body1\">\n\t                  Health: \n\t                </Typography>\n\t                <LinearProgressWithLabel value={health} />\n\t                <Typography variant=\"body1\">\n\t                  Hunger: \n\t                </Typography>\n\t                <LinearProgressWithLabel value={hunger} />\n\t                <Typography variant=\"body1\">\n\t                  Happiness: \n\t                </Typography>\n\t                <LinearProgressWithLabel value={happiness} />\n\t                <ButtonGroup color=\"primary\" variant=\"contained\" aria-label=\"outlined primary button group\">\n\t\t\t\t\t  <Button disabled={gameEnd} onClick={cleanPet}>Clean</Button>\n\t\t\t\t\t  <Button disabled={gameEnd} onClick={feedPet}>Feed</Button>\n\t\t\t\t\t  <Button disabled={gameEnd} onClick={playPet}>Play</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t  \t\t<Button onClick={resetGame}>{gameEnd? \"Play again!\" : \"Reset Game\"}</Button>\n\t              </Grid>\n\t            </Grid>\n\t          </Grid>\n\t          <Grid item xs={4} sm={4} md={6}>\n\t              <Character name={name} happiness={happiness} age={age} health={health} />\n\t          </Grid>    \n\t        </Grid>\n\t      </Paper>\n\t\t  <Copyright />\n    \t</Grid>\n    \t{gameEnd && \n    \t\t <Dialog\n\t\t        open={dialogOpen}\n\t\t        onClose={handleDialogClose}\n\t\t        aria-labelledby=\"alert-dialog-title\"\n\t\t        aria-describedby=\"alert-dialog-description\"\n\t\t      >\n\t\t        <DialogTitle id=\"alert-dialog-title\">Game Over.</DialogTitle>\n\t\t        <DialogContent>\n\t\t          <DialogContentText id=\"alert-dialog-description\">\n\t\t           Great job! Let's play again!\n\t\t          </DialogContentText>\n\t\t        </DialogContent>\n\t\t        <DialogActions>\n\t\t          <Button onClick={handleDialogClose} color=\"primary\">\n\t\t            Close\n\t\t          </Button>\n\t\t          <Button onClick={resetGame} color=\"primary\" autoFocus>\n\t\t            Start Over!\n\t\t          </Button>\n\t\t        </DialogActions>\n      \t\t</Dialog>\n    \t}\n    </React.Fragment>\n  )\n}","C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\containers\\Welcome.js",[],"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\utils\\helpers.js",[],"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\components\\Copyright.js",[],"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\components\\LinearProgressWithLabel.js",[],"C:\\Users\\Elissavet\\Documents\\projects\\tamagotchi-virtual-pet\\src\\components\\Character.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":275,"column":6,"nodeType":"45","endLine":275,"endColumn":59,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'beginLife' and 'handleNextEvent'. Either include them or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [gameEnd, petName, dayDurationInSeconds, dayDuration, beginLife, handleNextEvent]",{"range":"52","text":"53"},[7320,7373],"[gameEnd, petName, dayDurationInSeconds, dayDuration, beginLife, handleNextEvent]"]